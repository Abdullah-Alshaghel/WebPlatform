import "Apm";
Apm.importFile("Alusus/WebPlatform");

use Srl;
use WebPlatform;

func createUi (buttonText: ptr[Char]) {
    createElement("div", "myDiv", "body");
    setElementAttribute("myDiv", "style", "text-align: center;");
    createElement("p", "myText", "myDiv");
    setElementAttribute("myText", "innerHTML", "<< لا إله إلا الله >>");
    System.sleep(2000000);
    createElement("p", "myText2", "myDiv");
    setElementAttribute("myText2", "innerHTML", "محمد رسول الله");
    setElementAttribute("myText2", "style", "color: green;");
    System.sleep(2000000);
    createElement("button", "myButton", "myDiv");
    setElementAttribute("myButton", "innerHTML", buttonText);
}

func getUiCreator (): ptr[function (ptr[Char])] {
    return createUi~ptr;
}

@uiEndpoint["/", "WebPlatform Example"]
func index {
    def mem: ref[array[Char]];
    mem~ptr = Memory.alloc(1)~cast[ptr[array[Char]]];
    setElementAttribute("body", "dir", "rtl");
    if mem~ptr == 0 {
        createElement("p", "myText", "body");
        setElementAttribute("myText", "innerHTML", "memory allocation failed");
    } else {
        mem(0) = 'O';
        mem(1) = 'k';
        mem(2) = 0;
        mem~ptr = Memory.realloc(mem~ptr, 100000)~cast[ptr[array[Char]]];
        def i: Int;
        for i = 3, i < 100000, ++i mem(i) = 1;
        def pf: ptr[function (ptr[Char])] = getUiCreator();
        pf(mem~ptr);
        // createElement("p", "myText", "body");
        // setElementAttribute("myText", "innerHTML", "بسم الله الرحمن الرحيم");
        // createElement("button", "myButton", "body");
        // setElementAttribute("myButton", "innerHTML", mem~ptr);
    }
    Memory.free(mem~ptr);
}

@uiEndpoint["/testget", "WebPlatform Example - Get Attribute Test"]
func testGet {
    createElement("input", "myInput", "body");
    System.sleep(5000000);
    createElement("p", "myText", "body");
    setElementAttribute("myText", "innerHTML", getElementAttribute("myInput", "value"));
}

func createHeader (): SrdRef[Widget] {
    def label: SrdRef[Label] = Label.new(String("أمثلة منصة ويب الأسس - الدردشة"));
    label.setFontColor(Color(255, 255, 255));
    label.setFontSize(30.0);
    label.setWidth(String("100%"));
    label.setHeight(String("100%"));
    label.setBackgroundColor(Color(0, 70, 100));

    def box: SrdRef[Box] = Box.new({ label });
    box.setWidth(String("100%"));
    box.setHeight(String("60"));
    box.setPadding(Quad(5));
    box.setBackgroundColor(Color(0, 70, 100));
    box.setBorderColor(Color(0, 70, 100));
    box.setBorder(Quad(1.5));

    return box~cast[SrdRef[Widget]];
}

@uiEndpoint["/testui", "WebPlatform Example - Test UI Widgets"]
func testUi {
    def label: SrdRef[Label] = Label.new(String("السلام عليكم"));
    label.setFontColor(Color(50, 50, 50));
    label.setFontSize(20.0);
    label.setWidth(String("100%"));
    label.setHeight(String("100%"));

    def textInput: SrdRef[TextInput] = TextInput.new();
    textInput.setWidth(String("100%"));
    textInput.setHeight(String("100%"));
    textInput.setFontSize(12.0);
    textInput.onKeyUp.connect(onKeyUp~ptr, label.obj~ptr);

    def button: SrdRef[Button] = Button.new(String("أرسل"));
    def bcPayload: ButtonClickPayload;
    bcPayload.label~no_deref = label.obj;
    bcPayload.textInput~no_deref = textInput.obj;
    button.onClick.connect(onButtonClicked~ptr, bcPayload~ptr);
    button.setFontSize(16.0);
    button.setHeight(String("100%"));
    button.setBackgroundColor(Color(200, 200, 200));
    button.setWidth(String("50pt"));

    def displayBox: SrdRef[Box] = Box.new({ label });
    displayBox.setWidth(String("100%"));
    displayBox.setHeight(String("100%"));
    displayBox.setBorder(Quad(1.5));
    displayBox.setBorderColor(Color(0, 0, 0));
    displayBox.setPadding(Quad(5));

    def inputBox: SrdRef[Box] = Box.new({ textInput, button });
    inputBox.setWidth(String("100%"));
    inputBox.setHeight(String("50pt"));
    inputBox.setLayout(String("row"));
    inputBox.setBorder(Quad(1.5));
    inputBox.setBorderColor(Color(0, 0, 0));
    inputBox.setPadding(Quad(5));

    def box: SrdRef[Box] = Box.new({ createHeader(), displayBox, inputBox });
    box.setHeight(String("100%"));
    box.setPadding(Quad(0, 50));

    setView(box);
    runEventLoop();
}

type ButtonClickPayload {
    def label: ref[Label];
    def textInput: ref[TextInput];
}

macro prepCastedArg [varName, varType, argName] {
    def varName: ref[varType];
    varName~ptr = argName~cast[ptr[varType]];
}

func onButtonClicked (widget: ref[Button], payload: ref[Int], extra: ptr) {
    prepCastedArg[bcPayload, ButtonClickPayload, extra];
    bcPayload.label.setText(bcPayload.label.getText() + "<br>" + bcPayload.textInput.getText().replace("\n", "<br>"));
    bcPayload.textInput.setText(String());
}

func onKeyUp (widget: ref[TextInput], payload: ref[String], extra: ptr) {
    prepCastedArg[label, Label, extra];
    if payload == "Shift+Enter" {
        label.setText(label.getText() + "<br>" + widget.getText().replace("\n", "<br>"));
        widget.setText(String());
    }
}

@uiEndpoint["/about", "WebPlatform Example - About"]
func enAbout {
    createElement("p", "myText", "body");
    setElementAttribute("myText", "innerHTML", "Author: Sarmad Khalid Abdullah");
}

@uiEndpoint["/عنا", "WebPlatform Ex - عنا"]
func arAbout {
    createElement("p", "myText", "body");
    setElementAttribute("myText", "innerHTML", "برمجة: سرمد خالد عبد الله");
}

Console.print("Starting server on port 8080...\nURL: http://localhost:8080/\n");
startServer({ "listening_ports", "8080", "static_file_max_age", "0" });

