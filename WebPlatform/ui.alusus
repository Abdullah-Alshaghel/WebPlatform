@merge module WebPlatform {
    //==========================================================================
    // Functions and Macros

    def view: SrdRef[Widget];
    function setView(v: SrdRef[Widget]) {
        unsetView();
        view = v;
        view.build(String("body"));
    }

    function unsetView() {
        if view.obj~ptr != 0 view.unbuild();
        view.release();
    }

    function getNewId (): String {
        @shared def counter: Int(0);
        return String("id") + (++counter);
    }

    macro defProp [propName, upperCasePropName, propType] {
        def propName: propType;
        func set__upperCasePropName__ (val: temp_ref[propType]) {
            this.propName = val;
            this.update();
        }
        func get__upperCasePropName__ (): ref[propType] {
            return this.propName;
        }
    }


    //==========================================================================
    // Quad
    // A tuple of four float values used for the four sides of a rectangle. This
    // is used for things like border thickness or padding.
    type Quad {
        def top: Float = 0;
        def right: Float = 0;
        def bottom: Float = 0;
        def left: Float = 0;
        
        handler this~init() {}
        handler this~init(Float) {
            this.top = this.right = this.bottom = this.left = value;
        }
        handler this~init(v: Float, h: Float) {
            this.top = this.bottom = v;
            this.right = this.left = h;
        }
        handler this~init(t: Float, r: Float, b: Float, l: Float) {
            this.top = t;
            this.right = r;
            this.bottom = b;
            this.left = l;
        }
        handler this~init(temp_ref[Quad]) {
            this = value;
        }
        handler this = temp_ref[Quad] {
            this.top = value.top;
            this.right = value.right;
            this.bottom = value.bottom;
            this.left = value.left;
        }
    }

    //==========================================================================
    // Color
    type Color {
        def red: Int = 0;
        def green: Int = 0;
        def blue: Int = 0;
        
        handler this~init() {}
        handler this~init(r: Int, g: Int, b: Int) {
            this.red = r;
            this.green = g;
            this.blue = b;
        }
        handler this~init(temp_ref[Color]) {
            this = value;
        }
        handler this = temp_ref[Color] {
            this.red = value.red;
            this.green = value.green;
            this.blue = value.blue;
        }
    }
}

