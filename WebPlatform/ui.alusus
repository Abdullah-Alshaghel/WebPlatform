@merge module WebPlatform {
    //==========================================================================
    // Functions and Macros

    def view: SrdRef[Widget];
    function setView(v: SrdRef[Widget]) {
        unsetView();
        view = v;
        view.build(String("body"));
    }

    function unsetView() {
        if view.obj~ptr != 0 view.unbuild();
        view.release();
    }

    function getNewId (): String {
        @shared def counter: Int(0);
        return String("id") + (++counter);
    }

    macro generateProperty [propName, upperCasePropName, propType] {
        def propName: propType;
        func set__upperCasePropName__ (val: temp_ref[propType]) {
            this.propName = val;
            this.update();
        }
        func get__upperCasePropName__ (): ref[propType] {
            return this.propName;
        }
    }


    //==========================================================================
    // Quad
    // A tuple of four float values used for the four sides of a rectangle. This
    // is used for things like border thickness or padding.
    type Quad {
        def top: Float = 0;
        def right: Float = 0;
        def bottom: Float = 0;
        def left: Float = 0;
        
        handler this~init() {}
        handler this~init(Float) {
            this.top = this.right = this.bottom = this.left = value;
        }
        handler this~init(v: Float, h: Float) {
            this.top = this.bottom = v;
            this.right = this.left = h;
        }
        handler this~init(t: Float, r: Float, b: Float, l: Float) {
            this.top = t;
            this.right = r;
            this.bottom = b;
            this.left = l;
        }
        handler this~init(temp_ref[Quad]) {
            this = value;
        }
        handler this = temp_ref[Quad] {
            this.top = value.top;
            this.right = value.right;
            this.bottom = value.bottom;
            this.left = value.left;
        }
    }

    //==========================================================================
    // Color
    type Color {
        def red: Int = 0;
        def green: Int = 0;
        def blue: Int = 0;
        
        handler this~init() {}
        handler this~init(r: Int, g: Int, b: Int) {
            this.red = r;
            this.green = g;
            this.blue = b;
        }

        handler this~init(hex: String) {
            def lowerHex: String = hex.toLowerCase();
            if hex.getLength() <= 3 {
                this.red = this.convertHexToDecimal(lowerHex(0)) * 16;
                this.green = this.convertHexToDecimal(lowerHex(1)) * 16;
                this.blue = this.convertHexToDecimal(lowerHex(2)) * 16;
            } else if hex.getLength() > 3 {
                this.red = (this.convertHexToDecimal(lowerHex(0)) * 16) + (this.convertHexToDecimal(lowerHex(1)));
                this.green = (this.convertHexToDecimal(lowerHex(2)) * 16) + (this.convertHexToDecimal(lowerHex(3)));
                this.blue = (this.convertHexToDecimal(lowerHex(4)) * 16) + (this.convertHexToDecimal(lowerHex(5)));
            }
        }

        handler this~init(hex: ptr[array[Char]]) {
            this~init(String(hex));
        }

        handler this~init(temp_ref[Color]) {
            this = value;
        }
        handler this = temp_ref[Color] {
            this.red = value.red;
            this.green = value.green;
            this.blue = value.blue;
        }

        func convertHexToDecimal(letter: Char): Int {
            if ( letter == '0' ) 
                return 0
            else if ( letter == '1' ) 
                return 1
            else if ( letter == '2' ) 
                return 2
            else if ( letter == '3' ) 
                return 3
            else if ( letter == '4' ) 
                return 4
            else if ( letter == '5' ) 
                return 5
            else if ( letter == '6' ) 
                return 6
            else if ( letter == '7' ) 
                return 7
            else if ( letter == '8' ) 
                return 8
            else if ( letter == '9' ) 
                return 9
            else if ( letter == 'a' ) 
                return 10
            else if ( letter == 'b' ) 
                return 11
            else if ( letter == 'c' ) 
                return 12
            else if ( letter == 'd' ) 
                return 13
            else if ( letter == 'e' ) 
                return 14
            else if ( letter == 'f' ) 
                return 15
            else return 0
        }
    }
}

