@merge module WebPlatform {
    def view: SrdRef[Widget];
    function setView(v: SrdRef[Widget]) {
        unsetView();
        view = v;
        view.build(String("body"));
    }

    function unsetView() {
        if view.obj~ptr != 0 view.unbuild();
        view.release();
    }

    function getNewId (): String {
        @shared def counter: Int(0);
        return String("id") + (++counter);
    }

    type Widget {
        def id: String;
        def owner: ref[Widget];
        def children: Array[SrdRef[Widget]];

        def buildThis: ptr[function (ownerId: String)];
        def onEvent: ptr[function (eventName: String, data: ref[Json])];

        function addChildren (count: Int, children: ...temp_ref[SrdRef[Widget]]) {
            while count-- > 0 {
                def child: ref[SrdRef[Widget]](children~next_arg[ref[SrdRef[Widget]]]);
                this.children.add(child);
                if this.id.getLength() > 0 child.build(this.id);
            }
        }
        
        function removeChildren (count: Int, children: ...temp_ref[SrdRef[Widget]]) {
            while count-- > 0 {
                def child: ref[SrdRef[Widget]](children~next_arg[ref[SrdRef[Widget]]]);
                def i: Int;
                for i = 0, i < this.children.getLength(), ++i {
                    if this.children(i).obj~ptr == child.obj~ptr {
                        child.unbuild();
                        this.children.remove(i);
                        return;
                    }
                }
            }
        }

        function build (ownerId: String) {
            this.id = getNewId();
            this.buildThis(ownerId);
            def i: Int;
            for i = 0, i < this.children.getLength(), ++i {
                this.children(i).build(this.id);
            }
        }
        
        function unbuild {
            def i: Int;
            for i = 0, i < this.children.getLength(), ++i {
                this.children(i).unbuild();
            }
            if this.id.getLength() > 0 {
                deleteElement(this.id);
                this.id = String();
            }
        }
    }

    type Box {
        @injection def widget: Widget;
        
        function buildThisImpl (ownerId: String) {
            createElement("div", this.id, ownerId);
        }
        buildThis = buildThisImpl~ptr~cast[Widget.buildThis~type];
        
        @shared function new (count: Int, args: ...temp_ref[SrdRef[Widget]]): SrdRef[Box] {
            def r: SrdRef[Box];
            r.alloc()~init();
            while count-- > 0 r.addChildren({ args~next_arg[ref[SrdRef[Widget]]] });
            return r;
        }
    }

    type Label {
        @injection def widget: Widget;
        def text: String;

        handler this~init(t: String) this.text = t;

        function setText (t: String) {
            this.text = t;
            if this.id.getLength() > 0 setElementAttribute(this.id, "innerHTML", this.text);            
        }

        function buildThisImpl (ownerId: String) {
            createElement("span", this.id, ownerId);
            setElementAttribute(this.id, "innerHTML", this.text);
        }
        buildThis = buildThisImpl~ptr~cast[Widget.buildThis~type];

        @shared function new (t: String): SrdRef[Label] {
            def r: SrdRef[Label];
            r.alloc()~init(t);
            return r;
        }
    }

    type Button {
        @injection def widget: Widget;
        def text: String;
        def onClick: Signal[Button, Int];

        handler this~init(t: String) {
            this.onClick.owner~no_deref = this;
            this.text = t;
        }

        function setText (t: String) {
            this.text = t;
            if this.id.getLength() > 0 setElementAttribute(this.id, "innerHTML", this.text);            
        }

        function onSignalConnectionsChanged(signal: ptr[Signal[Button, Int]], connectionCount: Int) {
            if this.id.getLength() > 0 {
                if signal == this.onClick~ptr {
                    if connectionCount > 0 registerEventHandler(this.id, "click", this~ptr)
                    else unregisterEventHandler(this.id, "click");
                }
            }
        }

        function buildThisImpl (ownerId: String) {
            createElement("button", this.id, ownerId);
            setElementAttribute(this.id, "innerHTML", this.text);
            if this.onClick.getConnectionCount() > 0 registerEventHandler(this.id, "click", this~ptr);
        }
        buildThis = buildThisImpl~ptr~cast[Widget.buildThis~type];

        function onEventImpl (eventName: String, data: ref[Json]) {
            if eventName == "click" this.onClick.emit(Int(0));
        }
        onEvent = onEventImpl~ptr~cast[Widget.onEvent~type];

        @shared function new (t: String): SrdRef[Button] {
            def r: SrdRef[Button];
            r.alloc()~init(t);
            return r;
        }
    }

    macro defSrdRefCast [tpName] {
        def __tpName__SrdRef: alias SrdRef[WebPlatform.tpName];
        @merge type __tpName__SrdRef {
            handler this~cast[SrdRef[WebPlatform.Widget]] return SrdRef[WebPlatform.Widget](this.refCounter, this.widget);
        }
    }
}

@merge module Srl {
    WebPlatform.defSrdRefCast[Box];
    WebPlatform.defSrdRefCast[Label];
    WebPlatform.defSrdRefCast[Button];
}

